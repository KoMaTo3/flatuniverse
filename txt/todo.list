- в сейве мира хранить номер грида и имя объекта, из которого должен спавниться персонаж
- после смерти загружается последнее сохранение (если факт сохранения был), либо последняя загрузка
- смерть игрока - полностью на совести lua, но нужна функция, откатывающая мир в последнее состояние
- аналогично, нужна и функция, делающая сейвгейм

- возможность указывать, какие объекты не должны сохраняться (ObjectAttr( objectName, { save = false } ))

- редактор: элемент отображения DOM-модели

- lua, обработка событий объекта: возможно, сделать для каждого объекта сцены некий table-объект. Например, объект "гриб":
  DOM.mushroom_abcdef0912346678 = { -- где abcdef0912346678 - md5( getObjectFullName )
    var0 = 0, -- произвольный список переменных объекта
    var1 = 1,
    ...
    varX = x,
    function0 = function() -- произвольный список функций объекта
    end,
    ...
    functionX = functionX()
    end,
  }
  UPD: всё не так. есть набор темплейтов, темплейт можно налепить на любой объект. темплейт по минимуму должен иметь:
    - переменную-массив cache (ну или какую-то другую), её суть - хранить уникальные значения объекта, например, хелсы
      если переменной cache нет - создать, если она не таблица - ERROR
      при выгрузке объекта сохранять этот cache
      при загрузке объекта - создавать объект в lua, обнулять его cache, загружать его из сейва. как-то так.
      Соответственно, нужна сериализация, которой пока нет. В целом не нужно ничего мудрёного, рекурсивно сохранять
      только переменные.
    А так же, если описана одна из функций, то делать привязки:
    - OnTrigger
    - OnCollision
    - OnTimer
      соответственно, листенер хранит не название функции, а "полноеИмяОбъектаСоВсемиПутями:имяФункции"
    Соответственно, текущий вариант сохранения листенеров - некорректен, убрать.
    Если нужны 2 одинаковых объекта, но малось отличающихся в логике, либо дублировать 2 шаблона, либо через
    if-настройки объекта.

- пад (raw key input?)
- звук (OpenAL). возможно, заменить на FMOD, т.к. OpenAL по сути умер.
